import os, asyncio, time, uuid, logging
from decimal import Decimal, ROUND_DOWN, InvalidOperation
from dotenv import load_dotenv
from pybit.unified_trading import WebSocket, HTTP
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from motor.motor_asyncio import AsyncIOMotorClient

load_dotenv()
TOKEN=os.getenv("TELEGRAM_TOKEN","")
BYBIT_KEY=os.getenv("BYBIT_API_KEY","")
BYBIT_SECRET=os.getenv("BYBIT_API_SECRET","")
NETWORK=os.getenv("NETWORK","mainnet").lower()
MONGO_URI=os.getenv("MONGO_URI","")
DB_NAME=os.getenv("DB_NAME","bybit_bot")
BYBIT_SETTLE=os.getenv("BYBIT_SETTLE","USDT").upper()
LOG_LEVEL=os.getenv("LOG_LEVEL","INFO").upper()

logging.basicConfig(level=getattr(logging,LOG_LEVEL,logging.INFO),
                    format="%(asctime)s | %(levelname)s | %(message)s")

msg_queue:asyncio.Queue=asyncio.Queue()
deal_seq=80000
db=None
coll_pos=None
coll_ev=None
coll_cfg=None
coll_subs=None
MAIN_LOOP: asyncio.AbstractEventLoop | None = None   # –≥–ª–∞–≤–Ω—ã–π event loop

SUPPORT_URL="https://t.me/bexruz2281488"

# –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É (–¥–ª—è fallback –Ω–æ–º–∏–Ω–∞–ª–∞)
LAST_EXEC_PRICE: dict[str, Decimal] = {}

# ------------------ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã —á–∏—Å–µ–ª ------------------

def _to_decimal(val):
    if val is None or val == "":
        return None
    try:
        return Decimal(str(val))
    except (InvalidOperation, ValueError, TypeError):
        return None

def fmt_qty(val, max_dec: int = 6) -> str:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/—Ä–∞–∑–º–µ—Ä –±–µ–∑ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Å –æ–±—Ä–µ–∑–∫–æ–π –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π"""
    d = _to_decimal(val)
    if not d:
        return "0"
    s = f"{d.normalize():f}"  # —É–±–∏—Ä–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—É
    if "." in s:
        i, f = s.split(".")
        f = f.rstrip("0")[:max_dec]
        s = i if not f else f"{i}.{f}"
    return s

def fmt_price(val) -> str | None:
    """–¶–µ–Ω–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é. None -> –Ω–µ –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É."""
    d = _to_decimal(val)
    if not d or d == 0:
        return None
    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: —á–µ–º –º–µ–Ω—å—à–µ —Ü–µ–Ω–∞, —Ç–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤
    dec = 2 if d >= 1 else 4 if d >= Decimal("0.1") else 6
    q = Decimal(10) ** -dec
    return f"{d.quantize(q, rounding=ROUND_DOWN):f}"

def fmt_usd(val) -> str | None:
    d = _to_decimal(val)
    if not d or d == 0:
        return None
    return f"${d:,.2f}".replace(",", " ")

def fmt_pct(val) -> str:
    d = _to_decimal(val) or Decimal("0")
    return f"{d.quantize(Decimal('0.01'), rounding=ROUND_DOWN):f}"

def fmt_lev(val) -> str | None:
    """–ü–ª–µ—á–æ: xN, –µ—Å–ª–∏ N>0. –ò–Ω–∞—á–µ —Å–∫—Ä—ã–≤–∞–µ–º."""
    d = _to_decimal(val)
    if d and d > 0:
        try:
            return f"x{int(d)}"
        except Exception:
            return f"x{d.normalize():f}"
    return None

def line(caption: str, value) -> str:
    """–í–µ—Ä–Ω—É—Ç—å '–ö–ª—é—á: –ó–Ω–∞—á–µ–Ω–∏–µ\n' –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ value –ø—É—Å—Ç–æ–µ."""
    return f"{caption}: {value}\n" if value not in (None, "", "‚Äî") else ""

def notional_from_row(row: dict) -> tuple[Decimal | None, bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–æ–º–∏–Ω–∞–ª, approx_flag).
    approx_flag=True, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (–±–µ–∑ positionValue).
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
      1) positionValue
      2) |size| * avgPrice
      3) |size| * markPrice
    """
    pv = _to_decimal(row.get("positionValue") or row.get("position_value"))
    if pv and pv > 0:
        return pv.quantize(Decimal("0.01"), rounding=ROUND_DOWN), False

    size = _to_decimal(row.get("size"))
    avg  = _to_decimal(row.get("avgPrice") or row.get("avg_price"))
    if size and avg and size != 0 and avg > 0:
        val = (abs(size) * avg).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
        return val, True

    mark = _to_decimal(row.get("markPrice") or row.get("mark_price"))
    if size and mark and size != 0 and mark > 0:
        val = (abs(size) * mark).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
        return val, True

    return None, False

# ------------------ UI ------------------

def kb(enabled: bool):
    t = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã" if enabled else "üîî –í–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_URL)],
        [InlineKeyboardButton(t, callback_data=("notify_off" if enabled else "notify_on"))]
    ])

async def broadcast(app:Application, text:str):
    cur = coll_subs.find({"enabled":True})
    async for sub in cur:
        try:
            await app.bot.send_message(chat_id=sub["chat_id"], text=text, reply_markup=kb(True))
        except Exception as e:
            logging.warning("Broadcast failed: %s", e)

# === WS callbacks (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ) ===
def _put_from_thread(item):
    if MAIN_LOOP is None:
        logging.error("MAIN_LOOP is not set, drop WS message")
        return
    MAIN_LOOP.call_soon_threadsafe(msg_queue.put_nowait, item)

def ws_pos(msg):
    logging.debug("WS position: %s", msg)
    _put_from_thread(("position", msg))

def ws_order(msg):
    logging.debug("WS order: %s", msg)
    _put_from_thread(("order", msg))

def ws_exec(msg):
    logging.debug("WS execution: %s", msg)
    _put_from_thread(("execution", msg))

# ------------------ telegram ------------------

async def cmd_start(update:Update, context:ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await coll_subs.update_one(
        {"chat_id":chat_id},
        {"$setOnInsert":{"created_at":int(time.time())},"$set":{"enabled":True}},
        upsert=True
    )
    text = ("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–æ–ø–∏—è –±–æ—Ç–∞ –ê–ª–µ–∫—Å–µ—è, —Å–æ–±—Ä–∞–Ω–Ω–∞—è –∑–∞ –ø–∞—Ä—É —á–∞—Å–æ–≤.\n"
            "–Ø —á–∏—Ç–∞—é –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞ Bybit –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª—ã: –æ—Ç–∫—Ä—ã—Ç–∏–µ, —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏ –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ, –ø–ª–µ—á–æ, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏ —Ä–∞–∑–º–µ—Ä.\n"
            "–°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
    await update.message.reply_text(text, reply_markup=kb(True))

async def on_toggle(update:Update, context:ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    chat_id = q.message.chat_id
    sub = await coll_subs.find_one({"chat_id":chat_id}) or {"enabled":True}
    if q.data=="notify_off":
        await coll_subs.update_one({"chat_id":chat_id},{"$set":{"enabled":False}},upsert=True)
        await q.edit_message_reply_markup(reply_markup=kb(False))
        await q.message.reply_text("–°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã. –ù–∞–∂–º–∏ ¬´üîî –í–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã¬ª, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", reply_markup=kb(False))
    elif q.data=="notify_on":
        await coll_subs.update_one({"chat_id":chat_id},{"$set":{"enabled":True}},upsert=True)
        await q.edit_message_reply_markup(reply_markup=kb(True))
        await q.message.reply_text("–°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö –º–∞—Å—Ç–µ—Ä–∞.", reply_markup=kb(True))

# ------------------ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ------------------

async def queue_consumer(app:Application,http:HTTP):
    logging.info("Queue consumer started")
    while True:
        try:
            topic,msg=await msg_queue.get()
            if topic=="position":
                await on_position(app,msg)
            elif topic=="execution":
                # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é execPrice –ø–æ —Å–∏–º–≤–æ–ª–∞–º (–¥–ª—è fallback –Ω–æ–º–∏–Ω–∞–ª–∞)
                try:
                    data = msg.get("data", [])
                    if isinstance(data, dict):
                        data = [data]
                    symbols = set()
                    for r in data:
                        s = r.get("symbol")
                        p = _to_decimal(r.get("execPrice") or r.get("price"))
                        if s and p:
                            LAST_EXEC_PRICE[s] = p
                        if s:
                            symbols.add(s)
                    # –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–æ–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–Ω—ã–π —Å—Ä–µ–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (–µ—Å–ª–∏ HTTP –¥–æ—Å—Ç—É–ø–µ–Ω)
                    for s in symbols:
                        await fetch_symbol_and_process(app,http,s)
                except Exception as e:
                    logging.warning("Execution follow-up failed: %s", e)
        except Exception as e:
            logging.error("Queue consumer error: %s", e)

# ------------------ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π ------------------

async def save_event(kind,symbol,side,size,avg,lev,deal_id,percent=None):
    doc={"_id":str(uuid.uuid4()),"t":int(time.time()),"kind":kind,"symbol":symbol,"side":side,
         "size":float(_to_decimal(size) or 0),"avg":float(_to_decimal(avg) or 0),"leverage":str(lev),"deal":int(deal_id)}
    if percent is not None: doc["percent"]=float(_to_decimal(percent) or 0)
    await coll_ev.insert_one(doc)

# ------------------ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∑–∏—Ü–∏–π ------------------

async def on_position(app:Application,msg:dict):
    global deal_seq
    if "data" not in msg: return
    rows=msg.get("data",[])
    if isinstance(rows,dict): rows=[rows]
    for r in rows:
        symbol=r.get("symbol")
        if not symbol: continue
        side=str(r.get("side","")).upper()

        size = _to_decimal(r.get("size","0")) or Decimal("0")
        avg  = _to_decimal(r.get("avgPrice", r.get("avg_price","0") or "0")) or Decimal("0")
        lev  = str(r.get("leverage", r.get("leverageEr","")))

        prev=await coll_pos.find_one({"_id":symbol}) or {"size":0.0,"avg":0.0,"side":"","deal":0}
        prev_size=_to_decimal(prev.get("size",0.0)) or Decimal("0")
        prev_side=str(prev.get("side",""))

        opened      = (prev_size==0 and size!=0)
        closed_full = (prev_size!=0 and size==0)
        partial     = (prev_size!=0 and size!=0 and abs(size)<abs(prev_size))

        if opened:
            deal_seq+=1
            await coll_pos.update_one({"_id":symbol},{"$set":{
                "size":float(size),"avg":float(avg),"side":side,"deal":int(deal_seq),"lev":lev
            }},upsert=True)

            # –ù–æ–º–∏–Ω–∞–ª: positionValue -> size*avg -> size*mark (‚âà)
            nt_val, approx = notional_from_row(r)

            # –î–æ–ø. fallback: –µ—Å–ª–∏ HTTP/mark/avg –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å—á–∏—Ç–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ WS
            if nt_val is None:
                lp = LAST_EXEC_PRICE.get(symbol)
                if lp:
                    nt_val = (abs(size) * lp).quantize(Decimal("0.01"), rounding=ROUND_DOWN)
                    approx = True

            nt_str = fmt_usd(nt_val)
            nt_str = f"‚âà {nt_str}" if nt_str and approx else nt_str

            txt = (
                f"–°–¥–µ–ª–∫–∞ ‚Ññ{deal_seq}\n"
                f"üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n\n"
                f"{side} {symbol}\n"
                f"–†–∞–∑–º–µ—Ä: {fmt_qty(size)}\n"
                f"{line('–ü–ª–µ—á–æ', fmt_lev(lev))}"
                f"{line('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞', fmt_price(avg))}"
                f"{line('–ù–æ–º–∏–Ω–∞–ª', nt_str)}"
            )
            await save_event("open",symbol,side,size,avg,lev,deal_seq)
            await broadcast(app,txt)
            continue

        if partial:
            left = (abs(size) / abs(prev_size)) if prev_size != 0 else Decimal("0")
            closed_pct = (Decimal("1") - left) * Decimal("100")

            deal_id=int(prev.get("deal",deal_seq+1) or deal_seq+1)
            await coll_pos.update_one({"_id":symbol},{"$set":{
                "size":float(size),"avg":float(avg),"side":side,"deal":deal_id,"lev":lev
            }},upsert=True)

            txt = (
                f"–°–¥–µ–ª–∫–∞ ‚Ññ{deal_id}\n"
                f"üüß –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ\n\n"
                f"{side} {symbol}\n"
                f"–ó–∞–∫—Ä—ã—Ç–æ: {fmt_pct(closed_pct)}%\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {fmt_qty(size)}\n"
                f"{line('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞', fmt_price(avg))}"
                f"{line('–ü–ª–µ—á–æ', fmt_lev(lev))}"
            )
            await save_event("partial",symbol,side,size,avg,lev,deal_id,percent=closed_pct)
            await broadcast(app,txt)
            continue

        if closed_full:
            deal_id=int(prev.get("deal",deal_seq+1) or deal_seq+1)
            await coll_pos.update_one({"_id":symbol},{"$set":{
                "size":0.0,"avg":0.0,"side":"","deal":deal_id,"lev":lev
            }},upsert=True)
            txt=(f"–°–¥–µ–ª–∫–∞ ‚Ññ{deal_id}\n"
                 f"‚¨õ –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n\n"
                 f"{prev_side} {symbol}\n"
                 f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            await save_event("close",symbol,prev_side,Decimal("0"),avg,lev,deal_id)
            await broadcast(app,txt)
            continue

        # –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        await coll_pos.update_one({"_id":symbol},{"$set":{
            "size":float(size),"avg":float(avg),"side":side,"lev":lev
        }},upsert=True)

# ------------------ –¥–æ–≥—Ä—É–∑–∫–∞ —Å—Ä–µ–∑–∞ –ø–æ —Å–∏–º–≤–æ–ª—É ------------------

async def fetch_symbol_and_process(app:Application,http:HTTP,symbol:str):
    try:
        r=http.get_positions(category="linear", symbol=symbol, settleCoin=BYBIT_SETTLE)
        lst=r.get("result",{}).get("list",[]) or []
        rows=[]
        for x in lst:
            if x.get("symbol")==symbol:
                rows.append({
                    "symbol":x.get("symbol"),
                    "side":x.get("side"),
                    "size":x.get("size"),
                    "avgPrice":x.get("avgPrice"),
                    "leverage":x.get("leverage"),
                    "markPrice":x.get("markPrice"),
                    "positionValue":x.get("positionValue")
                })
        if rows:
            await on_position(app,{"topic":"position","data":rows})
    except Exception as e:
        logging.warning("Fetch positions for %s failed: %s", symbol, e)

# ------------------ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ------------------

async def post_init(app:Application):
    global MAIN_LOOP
    MAIN_LOOP = asyncio.get_running_loop()
    logging.info("Starting post_init...")

    client=AsyncIOMotorClient(MONGO_URI,uuidRepresentation="standard")
    global db, coll_pos, coll_ev, coll_cfg, coll_subs
    db=client[DB_NAME]
    coll_pos=db["positions"]
    coll_ev=db["events"]
    coll_cfg=db["config"]
    coll_subs=db["subscribers"]
    await db.command("ping")
    logging.info("Mongo connected: db=%s", DB_NAME)

    bot=await app.bot.get_me()
    logging.info("Telegram bot authorized: @%s id=%s", bot.username, bot.id)

    http=HTTP(testnet=(NETWORK!="mainnet"),api_key=BYBIT_KEY,api_secret=BYBIT_SECRET)
    logging.info("Bybit HTTP ready network=%s", NETWORK)

    # –∏–Ω–¥–µ–∫—Å—ã
    await coll_pos.create_index("side")
    await coll_ev.create_index([("t",1)])
    await coll_subs.create_index("chat_id", unique=True)
    logging.info("Mongo indexes ready")

    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ USDT-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
    try:
        r=http.get_positions(category="linear", settleCoin=BYBIT_SETTLE)
        lst=r.get("result",{}).get("list",[]) or []
        cnt=0
        for x in lst:
            symbol=x.get("symbol")
            if not symbol: continue
            size=_to_decimal(x.get("size","0")) or Decimal("0")
            if size==0: continue
            avg=_to_decimal(x.get("avgPrice", x.get("avg_price","0") or "0")) or Decimal("0")
            side=str(x.get("side","")).upper()
            lev=str(x.get("leverage",""))
            global deal_seq
            deal_seq+=1
            await coll_pos.update_one({"_id":symbol},{"$set":{
                "size":float(size),"avg":float(avg),"side":side,"deal":int(deal_seq),"lev":lev
            }},upsert=True)
            await save_event("detected",symbol,side,size,avg,lev,deal_seq)
            cnt+=1
        logging.info("HTTP bootstrap positions settle=%s count=%s", BYBIT_SETTLE, cnt)
    except Exception as e:
        logging.warning("HTTP bootstrap failed: %s", e)

    # –∫–æ–Ω—Å—é–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    consumer=asyncio.create_task(queue_consumer(app,http))
    app.bot_data["consumer_task"]=consumer

    # –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WS –Ω–∞ unified v5
    ws=WebSocket(channel_type="private",testnet=(NETWORK!="mainnet"),
                 api_key=BYBIT_KEY,api_secret=BYBIT_SECRET,domain="bybit")
    ws.position_stream(callback=ws_pos)
    ws.order_stream(callback=ws_order)
    ws.execution_stream(callback=ws_exec)
    app.bot_data["ws"]=ws
    logging.info("Bybit WS subscribed: position, order, execution")

async def post_stop(app:Application):
    ws = app.bot_data.get("ws")
    if ws:
        try: ws.exit()
        except Exception: pass
    t = app.bot_data.get("consumer_task")
    if t:
        t.cancel()
    logging.info("Application stopped")

def main():
    logging.info("Launching application...")
    app = (
        Application.builder()
        .token(TOKEN)
        .post_init(post_init)
        .post_stop(post_stop)
        .build()
    )
    app.add_handler(CommandHandler("start",cmd_start))
    app.add_handler(CallbackQueryHandler(on_toggle, pattern="^(notify_on|notify_off)$"))
    app.run_polling(allowed_updates=None, close_loop=False)

if __name__=="__main__":
    main()
